---
globs: *.tsx,*.ts
description: API and data handling patterns to prevent runtime errors.
---

# API & Data Handling Patterns

## Safe Data Access
Prevent runtime errors by safely accessing data.

**Array Mapping**: Always use a fallback array.
```typescript
{(items || []).map(item => <div key={item.id}>{item.name}</div>)}
```

**Property Access**: Use optional chaining (`?.`).
```typescript
const userName = user?.full_name || 'Unknown';
const roleName = user?.roles?.[0]?.name || 'No Role';
```

## API Response Handling
Handle API calls defensively to avoid crashes.

**Fetching Data**: Always handle different response structures and provide a fallback.
```typescript
const fetchData = async () => {
  try {
    const response = await apiService.getData();
    // Handles { "data": [...] }, [...], or undefined responses
    return response.data || response || [];
  } catch (error) {
    console.error('API Error:', error);
    return []; // Return an empty array on error
  }
};
```

**State Updates**: Initialize state with empty arrays and use `try-catch-finally`.
```typescript
const [data, setData] = useState<User[]>([]);
const [loading, setLoading] = useState(true);

try {
  const response = await apiService.getUsers();
  setData(response.data || response || []);
} catch (error) {
  setData([]); // Set to fallback on error
} finally {
  setLoading(false);
}
```