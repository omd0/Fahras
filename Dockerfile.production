# Multi-stage build for production
FROM node:18-alpine AS frontend-build

WORKDIR /app
COPY web/package*.json ./
RUN npm ci --only=production

COPY web/ ./
RUN npm run build

FROM php:8.3-fpm-alpine AS backend-build

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    postgresql-dev \
    oniguruma-dev \
    libzip-dev

# Install PHP extensions
RUN docker-php-ext-install pdo pdo_pgsql mbstring exif pcntl bcmath gd zip

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/html

# Copy composer files
COPY api/composer.json api/composer.lock ./

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Copy application code
COPY api/ ./

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache

# Production stage
FROM nginx:alpine

# Install PHP-FPM
RUN apk add --no-cache php83-fpm php83-pdo php83-pdo_pgsql php83-mbstring php83-xml php83-json php83-curl php83-zip

# Copy nginx configuration
COPY nginx.production.conf /etc/nginx/conf.d/default.conf

# Copy built frontend
COPY --from=frontend-build /app/build /var/www/html/public

# Copy backend
COPY --from=backend-build /var/www/html /var/www/html

# Create necessary directories
RUN mkdir -p /var/www/html/storage/logs \
    && mkdir -p /var/www/html/storage/framework/cache \
    && mkdir -p /var/www/html/storage/framework/sessions \
    && mkdir -p /var/www/html/storage/framework/views \
    && chown -R www-data:www-data /var/www/html

# Copy startup script
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

EXPOSE 80

CMD ["/usr/local/bin/docker-entrypoint.sh"]
